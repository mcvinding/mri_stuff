#!/bin/sh
#
#    This script creates the BEM meshes using multiecho/flash images
#
#    Before running this script:
#
#    1. Run organize_mri_data to create a directory structure with appropriate links
#    2. Create symbolic links to make flash05 and flash30 point to the appropriate series
#       The echos should be numbered 001 ... 008 under each of these directories
#    3. Set SUBJECTS_DIR and SUBJECT environment variables appropriately
#    4. cd to the directory where flash05 (edit: flash06) is
#    5. Run this script without any arguments
#
#   Revised script for running "flash" image BEM from multiecho sequences from GE scanner at KI. I do not guarantee that it will work for any other type of sequency. Edited by @mcvinding. Original copyright below.
#
#   Copyright 2006
#
#   Matti Hamalainen
#   Athinoula A. Martinos Center for Biomedical Imaging
#   Massachusetts General Hospital
#   Charlestown, MA, USA
#
#   $Id: mne_flash_bem 2902 2009-10-31 23:00:23Z nicks $
#
#   Revision 1.5  2008/10/23 21:41:45  msh
#   Check for FREESURFER_HOME when appropriate
#   mne_setup_source_space does not need the freesurfer license any more
#
#   Revision 1.4  2007/01/18 20:56:32  msh
#   Exit if SUBJECTS_DIR or SUBJECT has not been set
#
#   Revision 1.3  2007/01/18 20:53:14  msh
#   Allow echo numbering starting from 002
#
#   Revision 1.2  2006/05/16 11:48:09  msh
#   Eliminated some possibilities for unreported failure.
#
#   Revision 1.1  2006/05/16 02:29:49  msh
#   Added mne_flash_bem and mne_organize_dicom
#
#
#
if [ ! "$FREESURFER_HOME" ] ; then 
    echo "The FreeSurfer environment needs to be set up for this script"
    exit 1
fi
if [ ! "$SUBJECTS_DIR" ]
then 
    echo "SUBJECTS_DIR has not been set"
    exit 1
fi
if [ ! "$SUBJECT" ]
then
    echo "SUBJECT has not been set"
    exit 1
fi
start_time=$(date)
echo 
echo "Processing the flash MRI data for subject $SUBJECT to produce"
echo "BEM meshes under $SUBJECTS_DIR/$SUBJECT/bem/flash"
echo 
#
#   Step 1 : Data conversion to mgz format
#
mkdir -p $SUBJECTS_DIR/$SUBJECT/mri/flash/parameter_maps
#
echo 
echo   "Step 1 : Converting images..."
echo
flashes="06"
echos="001 002 003 004 005 006 007 008"
echos_done=0
missing=false
for flash in $flashes
do
  for echo in $echos
  do
    dir=flash${flash}/$echo
    if [ ! -d $dir ]
    then 
	missing=true
    fi
  done
done
if [ "$missing" = true ]
then
    echos="002 003 004 005 006 007 008 009"
fi
for flash in $flashes
do
  for echo in $echos
  do
    dir=flash${flash}/$echo
    if [ ! -d $dir ]
    then 
	echo "Directory $dir is missing"
	exit 1
    fi
  done
done
#
for flash in $flashes
do
  for echo in $echos
  do
    dir=flash${flash}/$echo
    if [ ! -d $dir ]
    then 
	echo "Directory $dir is missing"
	exit 1
    fi
    sample_file=$(ls -1 $dir | head -1)
    dest_file=$SUBJECTS_DIR/$SUBJECT/mri/flash/mef${flash}_${echo}.mgz
#
#   Do not redo
#
    if [ -f $dest_file ]
    then
	echo "$dest_file is already there"
    else 
	mri_convert $dir/$sample_file $dest_file -zgez
	let echos_done=$echos_done+1
    fi
  done
done
#
#  Step 2 : Create the parameter maps
#
echo
echo "Step 2 : Creating the parameter maps..."
echo
cd $SUBJECTS_DIR/$SUBJECT/mri/flash
if [ $? -ne 0 ]
then
    echo "Could not change to directory $SUBJECTS_DIR/$SUBJECT/mri/flash"
    exit 1
fi
#
#  Clear everything if some of the data were reconverted
#
if [ $echos_done -gt 0 ]
then
    rm -rf parameter_maps/*
    echo "Parameter maps directory cleared"
fi
mkdir -p parameter_maps
if [ $(ls -1 parameter_maps | wc -l) -eq 0 ]
then
    cd parameter_maps
#    mri_ms_fitparms mef*.mgz parameter_maps
    mri_average -noconform ../mef*.mgz flash6.mgz
    if [ $? -ne 0 ] ; then
	echo "Could compute the average of $files"
	exit 1
    fi
    echo 
    echo "FILES IN FOLDER:"
    ls
    echo "--------------------------------------"
    rm -f flash6_reg.mgz
else
    echo "Parameter maps were already computed"
fi
#
#  Step 3 : Synthesize the images
#
echo
echo  "Step 3 : Synthesizing..."
echo

if [ ! -f flash6_reg.mgz ]
then
    if [ -f "../../T1.mgz" ]
    then
	echo "Using T1.mgz"
	ref_volume="../../T1.mgz"
    else
	ref_volume="../../T1"
    fi
    fsl_rigid_register -r $ref_volume -i flash6.mgz -o flash6_reg.mgz
else
    echo "Registered flash 5 image is already there"
fi
#then
#    mri_synthesize 20 5 5 T1.mgz PD.mgz flash6.mgz
#    rm -f flash6_reg.mgz
#else
#    echo "Synthesized flash 5 volume is already there"
#fi
#
#   Step 4 : Register with MPRAGE
#
#echo
#echo  "Step 4 : Registering flash 5 with MPRAGE..."
#echo
#if [ ! -f flash6_reg.mgz ]
#then
#    if [ -f "../../T1.mgz" ]
#    then
#	ref_volume="../../T1.mgz"
#    else
#	ref_volume="../../T1"
#    fi
#    fsl_rigid_register -r $ref_volume -i flash5.mgz -o flash5_reg.mgz
#else
#    echo "Registered flash 5 image is already there"
#fi

#
#   Step 5a : Convert flash5 into COR
#
echo
echo "Step 5a: Converting flash volume into COR format..."
echo
mkdir -p ../../flash5 		#This folder must be called "flash5" or "mri_make_bem_surfaces" does not work!
rm -f ../../flash5/*
mri_convert flash6_reg.mgz ../../flash5
if [ $? -ne 0 ]
then
    echo "flash volume conversion to COR failed"
    exit 1
fi
#
#  Step 5b and c : Convert the mgz volumes into COR
#
cd $SUBJECTS_DIR/$SUBJECT/mri
convertT1=false
if [ -d T1 ] 
then
    if [ $(ls -1 T1/COR* 2>/dev/null | wc -l) -eq 0 ]
    then
	convertT1=true
    fi
else
    convertT1=true
fi
echo "convert T1 = $convertT1"

convertbrain=false

if [ -d brain ] 
then
    if [ $(ls -1 brain/COR* 2>/dev/null | wc -l) -eq 0 ]
    then
	convertbrain=true
    fi
else
    convertbrain=true
fi
echo "convert brain = $convertbrain"

if [ $convertT1 = true ]
then
    echo
    echo "Step 5b : Converting T1 volume into COR format..."
    echo
    if [ ! -f T1.mgz ]
    then
	echo "Both T1 mgz and T1 COR volumes missing"
	exit 1
    fi
    mkdir -p T1
    mri_convert T1.mgz T1
    if [ $? -ne 0 ]
    then
	echo "T1 volume conversion to COR failed"
	exit 1
    fi
else
    echo
    echo "Step 5b : T1 volume is already in COR format"
    echo
fi
if [ $convertbrain = true ]
then
    echo
    echo "Step 5c : Converting brain volume into COR format..."
    echo
    if [ ! -f brain.mgz ]
    then
	echo "Both brain mgz and brain COR volumes missing"
	exit 1
    fi
    mkdir -p brain
    mri_convert brain.mgz brain
    if [ $? -ne 0 ]
    then
	echo "brain volume conversion to COR failed"
	exit 1
    fi
else
    echo
    echo "Step 5c : brain volume is already in COR format"
    echo
fi
#
#   Finally ready to go
#
echo 
echo "Step 6 : Creating the BEM surfaces..."
echo
pwd
mri_make_bem_surfaces $SUBJECT
echo 
echo "Step 7 : Converting the tri files into surf files..."
#
cd $SUBJECTS_DIR/$SUBJECT/bem
mkdir -p flash
cd flash
surfs="inner_skull outer_skull outer_skin"
for surf in $surfs
do
     pwd
     echo
     echo "$surf ..."
     echo 
     mv ../${surf}.tri ${surf}.tri
     mne_convert_surface --tri ${surf}.tri --surfout ${surf}.surf --swap --mghmri $SUBJECTS_DIR/$SUBJECT/mri/flash/parameter_map/flash6_reg.mgz
done
#
#   Cleanup section
#
echo 
echo "Final step : Cleaning up..."
echo
cd $SUBJECTS_DIR/$SUBJECT/bem
rm inner_skull_tmp.tri
cd $SUBJECTS_DIR/$SUBJECT/mri
if [ $convertT1 = true ]
then
    rm -rf T1
    echo "Deleted the T1 COR volume"
fi
if [ $convertbrain = true ]
then
    rm -rf brain
    echo "Deleted the brain COR volume"
fi
rm -rf flash5
echo "Deleted the flash5 COR volume"
echo
echo "Thank you for waiting."
echo "The BEM triangulations for this subject are now available at $SUBJECTS_DIR/$SUBJECT/bem/flash"
echo "We hope the BEM meshes created will facilitate your MEG and EEG data analyses."
echo
echo "Processing started at $start_time"
echo "Processing finished at $(date)"
echo
exit 0





